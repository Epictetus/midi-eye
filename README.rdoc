= midi-eye

A transparent MIDI input event listener for Ruby 

== Requirements

* {midi-message}[http://github.com/arirusso/midi-message]
* {nibbler}[http://github.com/arirusso/nibbler]
* {unimidi}[http://github.com/arirusso/unimidi]

== Install

  gem install midi-eye
	
== Usage

  require 'midi-eye'

This is an example that takes any note messages received from a unimidi input, transposes them up one octave
and then sends them to an output  
  
First, initialize the MIDI IO ports
  
  @input = UniMIDI::Input.first.open
  @output = UniMIDI::Output.first.open
  
Then create a listener for the input port
 
  transpose = MIDIEye::Listener.new(@input)

You can bind an event to the listener using Listener#listen_for

The listener will try to positively match the parameters you pass in to the properties of the messages it receives.

In this example, we will tell it to look for note on/off messages which are easily identifiable by their class

You also have the option of leaving out the parameters altogether and including a conditional in your callback (eg if event[:message].class.eql?(NoteOn) do... etc)

  transpose.listen_for(:class => [MIDIMessage::NoteOn, MIDIMessage::NoteOff]) do |event|
   
    # raise the note value by an octave
    event[:message].note += 12
    
    # send the altered note message to the output you chose earlier 
    @output.puts(event[:message].to_bytes)
  
  end
  
You can bind as many events to a listener as you wish, just keep calling Listener#listen_for

Once all the events are bound, start the listener
    
  transpose.run
   
A listener can also be run in a background thread by passing in :background => true.

  Transpose.run(:background => true)
  
See another example {here}[http://github.com/arirusso/midi-eye/blob/master/examples/arpeggios.rb] that deals with MIDI clock sync  

== Documentation

* {examples}[http://github.com/arirusso/midi-eye/tree/master/examples]
* {rdoc}[http://rdoc.info/gems/midi-eye]
    
== Author

* {Ari Russo}[http://github.com/arirusso] <ari.russo at gmail.com>

== License

Apache 2.0, See the file LICENSE

Copyright (c) 2011 Ari Russo
